#!/bin/bash

red=`tput setaf 1`
green=`tput setaf 2`
yellow=`tput setaf 3`
blue=`tput setaf 4`
magenta=`tput setaf 5`
cyan=`tput setaf 6`
white=`tput setaf 7`
reset=`tput sgr0`


function show_help {
	echo "usage: $0 [-f filename -eA/-eW/-eV/-eR/ --tellmeweb --zapmeweb --niktomeweb --dirbmeweb]"
	echo " "
	echo "-f filename     : Filename which contains the IP Address or the Subnets to be scanned"
}
domain=""

file=
verbose=0 # Variables to be evaluated as shell arithmetic should be initialized to a default or validated beforehand.
eyeAll=
eyeWeb=
eyeVNC=
eyeRDP=
tellmeweb=
niktomeweb=
dirbmeweb=
zapmeweb=
nbt=

while :; do
#for i in $@; do
#    echo $1
    case $1 in
        -h|-\?|--help)   # Call a "show_help" function to display a synopsis, then exit.
            show_help
            exit
            ;;
        -f|--file)       # Takes an option argument, ensuring it has been specified.
            if [ -n "$2" ]; then
                file=$2
                shift
		shift
            else
                printf '"${red}[!]${reset} ERROR: "--file" requires a non-empty option argument.\n' >&2
                exit 1
            fi
            ;;
        --file=?*)
            file=${1#*=} # Delete everything up to "=" and assign the remainder.
            ;;
        --file=)         # Handle the case of an empty --file=
            printf '"${red}[!]${reset} ERROR: "--file" requires a non-empty option argument.\n' >&2
            exit 1
            ;;
        -v|--verbose)
            verbose=$((verbose + 1)) # Each -v argument adds 1 to verbosity.
            ;;
        --)              # End of all options.
            shift
            break
            ;;
        -?*)
            printf '"${red}[!]${reset} WARN: Unknown option (ignored): %s\n' "$1" >&2
            printf "\n"
	    show_help
            exit
            ;;

        *)               # Default case: If no more options then break out of the loop.
            break
    esac
done


# if --file was provided, open it for writing, else duplicate stdout
if [ -n "$file" ]; then

	if [ ! -f "$file" ]; then
		echo "${red}[!]${reset} File not found. Please provide a valid file containing subnets or IP Addresses"
		exit
	fi

        for i in $(cat "$file")

# Create a file structure
        do
		yearmm=$(date +%Y-%m)

# Run DNS Enumeration on the provided subnet
		echo "${green}[+]${reset} $i - Running DNS Enumeration"
		mkdir -p ./Recon/$i/DNS_Scan
		nmap -Pn -sL $i -oA ./Recon/$i/DNS_Scan/DNS-$yearmm -v
		cat ./Recon/$i/DNS_Scan/DNS-$yearmm.nmap | grep \( |grep \( | cut -d " " -f5- | grep -v "(0 hosts up)" | tr -d \( | tr -d \) | awk '{print "\"" $1 "\",\"" $2"\""}' > ./Recon/$i/DNS_Scan/DNS_List.csv

# Run nmap top 250 Ports on the provided range; Ports are customizable and Nmap options are customizable
		echo "${green}[+]${reset} $i - Running nmap top-500 Scan"
		mkdir -p ./Recon/$i/Port_Scan
		nmap -Pn -n $i --top-ports 500 -sT -oA ./Recon/$i/Port_Scan/nmap_top500-$yearmm -sV --version-intensity 0 -v -PE --open

		if [ -f ./Recon/$i/Port_Scan/nmap_top500-$yearmm.gnmap ]; then
			# Get screenshots of web services
			if [ ! -d ./Recon/$i/Screenshots/web ]; then
				mkdir  -p ./Recon/$i/Screenshots/web 
			fi
			echo "${green}[+]${reset} $i - Trying to grab screenshots of web services"
			python /opt/EyeWitness/EyeWitness.py -x ./Recon/$i/Port_Scan/nmap_top500-$yearmm.xml --no-dns -d ./Recon/$i/Screenshots/web --timeout 15 --headless --results 50 --no-prompt

			# Get screenshots of vnc
			if [ ! -d ./Recon/$i/Screenshots/vnc ]; then 
				mkdir -p ./Recon/$i/Screenshots/vnc
			fi
			echo "${green}[+]${reset} $i - Trying to grab screenshots of VNC services"
			python /opt/EyeWitness/EyeWitness.py -x ./Recon/$i/Port_Scan/nmap_top500-$yearmm.xml --no-dns -d ./Recon/$i/Screenshots/vnc --vnc --timeout 15 --results 50 --no-prompt

			# Get screenshots of rdp
			if [ ! -d ./Recon/$i/Screenshots/rdp ]; then
				mkdir -p ./Recon/$i/Screenshots/vnc
			fi
			echo "${green}[+]${reset} $i - Trying to grab screenshots of RDP services"
			python /opt/EyeWitness/EyeWitness.py -x ./Recon/$i/Port_Scan/nmap_top500-$yearmm.xml --no-dns -d ./Recon/$i/Screenshots/rdp --rdp --timeout 15 --results 50 --no-prompt

			# Run Whatweb
			echo "${green}[+]${reset} $i - Running TellMeWeb scan"
			cd ./Recon/$i
			ruby /opt/pentest/tools/tellmeweb/tell-me-web.rb ./Port_Scan/nmap_top500-$yearmm.gnmap
			cd ../../

			# Run Nitko
			echo "${green}[+]${reset} $i - Running Nikto scan"
			cd ./Recon/$i
			pwd
			read -rsp $'Press any key to continue...\n' -n1 key
			ruby /opt/pentest/tools/niktomeweb/nikto-me-web.rb ./Port_Scan/nmap_top500-$yearmm.gnmap
			read -rsp $'Press any key to continue...\n' -n1 key
			cd ../../

			# Run ZAP
			echo "${green}[+]${reset} $i - Running ZAP"
			cd ./Recon/$i
			ruby /opt/pentest/tools/zapmeweb/zap-me-web.rb ./Port_Scan/nmap_top500-$yearmm.gnmapa
			cd ../../

			# Run DirB
			echo "${green}[+]${reset} $i - Running dirb scan"
			cd ./Recon/$i
			ruby /opt/pentest/tools/dirbmeweb/dirb-me-web.rb ./Port_Scan/nmap_top500-$yearmm.gnmap
			cd ../..

			# Check for NBTScan Scans; It checks for the nbtscan information
			if [ ! -d ./Recon/$i/nbtscan ]; then
				mkdir -p ./Recon/$i/nbtscan
			fi
			echo "${green}[+]${reset} $i - Running nbtscan"
			nbtscan $i > ./Recon/$i/nbtscan/nbtscan.txt

			# Check for ZAP Automated Scans; Meh It automatically checks for scanned host; This may be skipped
			if [ -d ./Recon/$i/tellmeweb_output ]; then
				grep "^[0-9]\+" ./Recon/Port_Scan/$i/nmap_top500-$yearmm.nmap | grep "\ open\ " | sort | uniq -c | sort -rn | awk '{print "\""$1"\",\""$2"\",\""$3"\",\""$4"\",\""$5" "$6" "$7" "$8" "$9" "$10" "$11" "$12" "$13"\""}' > test.csv

				cat ./Recon/$i/tellmeweb_output/*.whatweb | grep -E 'Drupal|Joomla' > ./Recon/$i/Further_Scan_Req
			else
				sleep 1
			fi

		else
			echo "${red}[!]${reset} No Nmap file found"
		fi
	done;
else
	show_help
fi
