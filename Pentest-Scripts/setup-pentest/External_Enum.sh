#!/bin/bash

#########################################
# Title:    Automatatron
# Major:    External Recon RunBook
# Minor:    1.0.1b
# Author:   Peter Bassill
# Date:     14/10/2018
#
# INSTRUCTIONS
#
# This is the hardcore bash version. It is advisable that you read these instructions
# Any updates to the Automatatron are controlled. To make an update:
#
# 1. Fork the Git Repo
# 2. Make your changes and make damn sure you comment your changes.
# 3. Push the changes to the Git Repo
# 4. Email Pete with the changes
#
# OPERATIONAL INSTRUCTIONS - aka - HOW TO USE THIS
#
# <-- More instructions here...

red=`tput setaf 1`
green=`tput setaf 2`
yellow=`tput setaf 3`
blue=`tput setaf 4`
magenta=`tput setaf 5`
cyan=`tput setaf 6`
white=`tput setaf 7`
reset=`tput sgr0`

verion = 1.0.11b

clear
echo "${green}---------------------------------------------------------------------${reset}"
echo "${green}| AutoMataTron - Recon Script                                       ${reset}"
echo "${green}| Build:     $version                                                ${reset}"
echo "${green}| Date:      14/10/2018                                             ${reset}"
echo "${green}| Author:    Peter /// Ev1l1                                        ${reset}"
echo "${green}|                                                                   ${reset}"
echo "${green}---------------------------------------------------------------------${reset}"
echo ""
echo "${green}This script ensures compliance against the following standards:"
echo "${cyan}  ISO17025:2017${reset} - General requirements for the competence of testing and calibration laboratories"
echo "${cyan}  ISO27001:2013${reset} - Information security management systems"
echo "${cyan}  ISO9001:2015${reset}  - Quality management systems"
echo ""


function usage {
	echo "${green}    Welcome. Usage instructions: $1 [-d domain]"
}
domain=""

while getopts "d:" OPT; do
	case $OPT in
		d) domain=$OPTARG;;
		*) usage $0; exit;;
	esac
done

if [ ! -d ./Recon ]; then
	  mkdir ./Recon
	  mkdir ./Recon/whois
	  mkdir ./Recon/hostsearch
	  mkdir ./Recon/dnslookup
	  mkdir ./Recon/dnsenum
	  mkdir ./Recon/domain
	  mkdir ./Recon/recon-ng-out
	  mkdir ./Recon/harvester
	  mkdir ./Recon/dnstwist
fi

###Perform check if $domain is populated
if [[ -z $domain ]]; then 
	usage $0;
	exit;
fi

stamp=$(date +"%m_%d_%Y")

#########################################
# Check I am root

if [ "$EUID" -ne 0 ]
  then echo "${red}[!]${reset} Dont be a dick. Read the code. Run as root"
  exit
fi

#########################################
# Do pre-flight checks

echo "${green}[+]${reset} Running pre-flight. Hold tight..."
  {
    apt update
  } &> /dev/null

echo "${green}[+]${reset} Running Core OS upgrade..."
  {
    apt upgrade -y
  } &> /dev/null

echo "${green}[+]${reset} Clean up system after upgrade..."
  {
    apt autoremove -y
  } &> /dev/null

if [ ! -d "/opt/SecLists" ]; then
  echo "${red}[!]${reset} SecLists Git Repo is being installed..."
  {
    git clone https://github.com/danielmiessler/SecLists.git /opt/SecLists
  } &> /dev/null
fi

if [ ! -d "/opt/EyeWitness" ]; then
  echo "${red}[!]${reset} EyeWitness Git Repo is being installed..."
  {
    git clone https://github.com/FortyNorthSecurity/EyeWitness.git /opt/EyeWitness
    opt/EyeWitness/setup/setup
  } &> /dev/null
fi

if [ ! -d "/opt/dnstwist" ]; then
  echo "${red}[!]${reset} DNSTwist Git Repo is being installed..."
  {
    git clone https://github.com/elceef/dnstwist.git /opt/dnstwist
  } &> /dev/null
fi

if [ ! -d "/opt/domain" ]; then
  echo "${red}[!]${reset} Domain Git Repo is being installed..."
  {
    git clone https://github.com/jhaddix/domain.git /opt/domain
  } &> /dev/null
  echo "${red}[!]${reset} You must now manually set up domain. Run /opt/domain/setup_enumall.sh"
  exit
fi





# Perform Whois of the Domain
if [ ! -f ./Recon/whois/whois.$domain ]; then
	if [ ! -d ./Recon/whois ]; then
		mkdir ./Recon/whois
	fi
	echo "${green}[+]${reset} Performing whois"
	whois -H $domain > ./Recon/whois/whois.$domain
else 
	echo "${green}[+]${reset} whois results present"
fi

# Perform hostsearch via DNS Dumpster API
if [ ! -f ./Recon/hostsearch/hostsearch.$domain ]; then
	if [ ! -d ./Recon/hostsearch ]; then
		mkdir ./Recon/hostsearch
	fi
	echo "${green}[+]${reset} Performing DNS Dumpster"
	curl -s http://api.hackertarget.com/hostsearch/?q=$domain > ./Recon/hostsearch/hostsearch.$domain

# Creating hostsearch Recon consistent as recon-ng Recon
	cat ./Recon/hostsearch/hostsearch.$domain | awk -F , '{print "\""$1"\""",""\""$2"\""}' > ./Recon/hostsearch/hostsearch.temp
	awk -F, '{$(NF+1)="X" FS "X" FS "X" FS "X" FS "hostsearch";}1' OFS=, ./Recon/hostsearch/hostsearch.temp > ./Recon/hostsearch/hostsearch.$domain.csv
else
	echo "${green}[+]${reset} DNS Dumpster results present"
fi

# Perform DNS queries
if [ ! -f ./Recon/dnslookup/dnslookup.$domain ]; then
	if [ ! -d ./Recon/dnslookup ]; then
		mkdir ./Recon/dnslookup
	fi
	echo "${green}[+]${reset} Performing DNS Queries"
	curl -s http://api.hackertarget.com/dnslookup/?q=$domain > ./Recon/dnslookup/dnslookup.$domain
else
	echo "${green}[+]${reset} DNS Queries Results present"
fi

# Performing Recon-ng enumall.sh
if [ ! -f ./Recon/recon-ng-out/recon-ng.$domain.csv ]; then
	if [ ! -d ./Recon/recon-ng-out ]; then
		mkdir ./Recon/recon-ng-out
	fi
	echo "${green}[+]${reset} Performing Recon-ng queries"
	/opt/pentest/tools/enumall/domain/enumall.py $domain -a -p /opt/pentest/tools/enumall/altdns/words.txt -w /opt/pentest/tools/enumall/sortedcombied-knock-dnsrecon-fierce-reconng.txt

	cp /tmp/$domain$stamp.csv ./Recon/recon-ng-out/recon-ng.$domain.csv
else
	echo "${green}[+]${reset} Recon-ng results present"
fi


# Run Harvester
if [ ! -f ./Recon/harvester/harvester.$domain.out ]; then
	if [ ! -d ./Recon/harvester ]; then
		mkdir ./Recon/harvester
	fi
	echo "${green}[+]${reset} Performing theharvester"
	theharvester -d $domain -b all -f ./Recon/harvester/harvester.$domain > ./Recon/harvester/harvester.$domain.out
else
	echo "${green}[+]${reset} theharvester results present"
fi

# DNS Enum
if [ ! -f ./Recon/dnsenum/dnsenum.$domain ]; then
	if [ ! -d ./Recon/dnsenum ]; then
		mkdir ./Recon/dnsenum
	fi
	echo "${green}[+]${reset} Performing DNSenum queries"
	dnsenum -o ./Recon/dnsenum/dnsenum.$domain.xml $domain > ./Recon/dnsenum/dnsenum.$domain
else
	echo "${green}[+]${reset} dnsenum results present"
fi

# DNS Twist
if [ ! -f ./Recon/dnstwist/dnstwist.$domain ]; then
	if [ ! -d ./Recon/dnstwist ]; then
		mkdir ./Recon/dnstwist
	fi
	echo "${green}[+]${reset} Performing DNStwist queries"
	python /opt/dnstwist/dnstwist.py -c -r $domain > ./Recon/dnstwist/dnstwist.$domain
else
	echo "${green}[+]${reset} DNSTwist results present"
fi


# Copying hostsearch via DNS Dumpster API to final Recon
	cp ./Recon/hostsearch/hostsearch.$domain.csv ./Recon/final_Recon.csv

#Adding , to the end of final_Recon
	sed -i -e "s/$/,/" ./Recon/final_Recon.csv 

###Copying data from theharvester between Resolving to virtual to final_Recon.csv
	sed -n "/Resolving/,/Virtual/{/Resolving/b;/Virtual/b;p}" ./Recon/harvester/harvester.$domain.out | awk -F : '{print "\"" $2 "\",\"" $1"\""}' >> ./Recon/harvester/harvester.rv.$domain
	awk -F, '{$(NF+1)="X" FS "X" FS "X" FS "X" FS "harvester";}1' OFS=, ./Recon/harvester/harvester.rv.$domain > ./Recon/harvester/harvester.temp2
	cat ./Recon/harvester/harvester.temp2 >> ./Recon/final_Recon.csv
#	rm ./Recon/harvester/harvester.temp
	rm ./Recon/harvester/harvester.temp2

###Copying data from theharvester between Virtual to Saving to final_Recon.csv
	sed -n "/Virtual/,/Saving/{/Virtual/b;/Saving/b;p}" ./Recon/harvester/harvester.$domain.out | awk '{print "\"" $2 "\",\"" $1"\""}' >> ./Recon/harvester/harvester.vs.$domain
	awk -F, '{$(NF+1)="X" FS "X" FS "X" FS "X" FS "harvester_virtual_host";}1' OFS=, ./Recon/harvester/harvester.vs.$domain > ./Recon/harvester/harvester.temp2
	cat ./Recon/harvester/harvester.temp2 >> ./Recon/final_Recon.csv
	rm ./Recon/harvester/harvester.temp
	rm ./Recon/harvester/harvester.temp2

###Running dnstwist on the domain and getting probable typo domains registered
	cat ./Recon/dnstwist/dnstwist.$domain | cut -d , -f2-3 | grep -v domain-name > ./Recon/dnstwist/dnstwist.temp
	awk -F, '{$(NF+1)="X" FS "X" FS "X" FS "X" FS "dnstwist";}1' OFS=, ./Recon/dnstwist/dnstwist.temp > ./Recon/dnstwist/dnstwist.temp2
	cat ./Recon/dnstwist/dnstwist.temp2 >> ./Recon/final_Recon.csv
	

###Copying data from theharvester between Email to Hosts and saving it to email_Recon.csv
	sed -n "/Emails/,/Hosts/{/Email/b;/Hosts/b;p}" ./Recon/harvester/harvester.$domain.out | grep -v "-" | awk '{print "\"" $1 "\""}' >> ./Recon/domain/emails_$domain.csv

###Appending the data generated from recon-ng to final_Recon.csv
	cat ./Recon/recon-ng-out/recon-ng.$domain.csv >> ./Recon/final_Recon.csv 

###Adding the domainname in the final_Recon.csv on the first coloum
	awk -v var="$domain" -F, '{$1=var FS $1;}1' OFS=, ./Recon/final_Recon.csv > ./Recon/final_Recon2.csv

###Get the final Recon
	cat ./Recon/final_Recon2.csv | cut -d , -f1- | grep -v = | sort | uniq > ./Recon/domain/final_$domain.csv
	echo "${green}[+]${reset} The result are stored in ./Recon/domain/final_$domain.csv"

	echo "${green}[+]${reset} dnsenum results present"
	echo "     The result are stored in ./Recon/domain/final_$domain.csv"
