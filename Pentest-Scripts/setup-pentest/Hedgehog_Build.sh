#!/bin/bash

#########################################
# Title:    Hedgehog Build
# Major:    Builder for standard pentest environments
# Minor:    2.1.1
# Author:   Peter Bassill
# Date:     15/10/2018
#
# INSTRUCTIONS
#
# This is the hardcore bash version. It will bring your Kali instance
# up to date.
#


red=`tput setaf 1`
green=`tput setaf 2`
yellow=`tput setaf 3`
blue=`tput setaf 4`
magenta=`tput setaf 5`
cyan=`tput setaf 6`
white=`tput setaf 7`
reset=`tput sgr0`

version = 2.1.1

clear
echo "${green}---------------------------------------------------------------------${reset}"
echo "${green}| Hedgehog Build                                       ${reset}"
echo "${green}| Build:     $version                                                ${reset}"
echo "${green}| Date:      15/10/2018                                             ${reset}"
echo "${green}| Author:    Peter /// Ev1l1                                        ${reset}"
echo "${green}|                                                                   ${reset}"
echo "${green}---------------------------------------------------------------------${reset}"
echo ""
echo "${green}This script ensures compliance against the following standards:"
echo "${cyan}  ISO17025:2017${reset} - General requirements for the competence of testing and calibration laboratories"
echo "${cyan}  ISO27001:2013${reset} - Information security management systems"
echo "${cyan}  ISO9001:2015${reset}  - Quality management systems"
echo ""


echo "${green}    Welcome. I will now bring your Kali instance up to date"

stamp=$(date +"%m_%d_%Y")

#########################################
# Check I am root

if [ "$EUID" -ne 0 ]
  then echo "${green}[!]${reset} Dont be a dick. Read the code. Run as root"
  exit
fi

#########################################
# Do pre-flight checks

echo "${green}[+]${reset} Running all the things. Go get a coffee..."
  {
    apt update
  } &> /dev/null

echo "${green}[+]${reset} Running Core OS upgrade..."
  {
    apt upgrade -y
    apt dist-upgrade -y
  } &> /dev/null

echo "${green}[+]${reset} Installing Base Packages (if they arent there)..."
  {
    apt install -y network-manager-dev network-manager-openconnect-gnome network-manager-openconnect network-manager-openvpn-gnome network-manager-openvpn network-manager-pptp-gnome network-manager-pptp network-manager-ssh-gnome network-manager-ssh network-manager-strongswan network-manager-vpnc-gnome network-manager-vpnc network-manager
    apt install -y spotify-client
    apt install -y realtek-rtl88xxau-dkms r8168-dkms fruitywifi
  } &> /dev/null

echo "${green}[+]${reset} Clean up system after upgrade..."
  {
    apt autoremove -y
  } &> /dev/null

if [ ! -d "/opt/pentest" ]; then
  echo "${green}[+]${reset} Getting the Core pentest repo..."
  {
    git clone https://github.com/Hedgehog-Security/pentest.git
  } &> /dev/null
else
  echo "${green}[+]${reset} Updating the Core pentest repo..."
  {
    cd /opt/pentest && git pull && cd /opt
  } &> /dev/null
fi

if [ ! -d "/opt/SecLists" ]; then
  echo "${green}[!]${reset} SecLists Git Repo is being installed..."
  {
    git clone https://github.com/danielmiessler/SecLists.git /opt/SecLists
  } &> /dev/null
else
  echo "${green}[!]${reset} SecLists Git Repo is being updated..."
  {
    cd /opt/SecLists && git pull && cd /opt
  } &> /dev/null

fi

if [ ! -d "/opt/EyeWitness" ]; then
  echo "${green}[!]${reset} EyeWitness Git Repo is being installed..."
  {
    git clone https://github.com/FortyNorthSecurity/EyeWitness.git /opt/EyeWitness
    opt/EyeWitness/setup/setup
  } &> /dev/null
else
  echo "${green}[!]${reset} EyeWitness Git Repo is being updated..."
  {
    cd /opt/EyeWitness && git pull && cd /opt
  } &> /dev/null
fi

if [ ! -d "/opt/dnstwist" ]; then
  echo "${green}[!]${reset} DNSTwist Git Repo is being installed..."
  {
    git clone https://github.com/elceef/dnstwist.git /opt/dnstwist
  } &> /dev/null
else
  echo "${green}[!]${reset} DNSTwist Git Repo is being updated..."
  {
    cd /opt/dnstwist && git pull & cd /opt
  } &> /dev/null
fi

if [ ! -d "/opt/domain" ]; then
  echo "${green}[!]${reset} Domain Git Repo is being installed..."
  {
    git clone https://github.com/jhaddix/domain.git /opt/domain
  } &> /dev/null
  echo "${green}[!]${reset} You must now manually set up domain. Run /opt/domain/setup_enumall.sh"
else
  echo "${green}[!]${reset} Domain Git Repo is being updated..."
  {
    cd /opt/domain && git pull && cd /opt
  } &> /dev/null
fi

echo "${green}[!]${reset} CommoneXploits Repo's are being installed..." 
  {
    git clone https://github.com/commonexploits/vlan-hopping.git
    git clone https://github.com/commonexploits/cisco-SNMP-enumeration.git
    git clone https://github.com/commonexploits/winocphc.git
    git clone https://github.com/commonexploits/weape.git
    git clone https://github.com/commonexploits/ipgen.git
    git clone https://github.com/commonexploits/dtpscan.git
    git clone https://github.com/commonexploits/livehosts.git
    git clone https://github.com/commonexploits/whatsfree.git
    git clone https://github.com/commonexploits/junijohn.git
    git clone https://github.com/commonexploits/sonijohn.git
  } &> /dev/null

if [ ! -d "/opt/post-exploitation" ]; then
  echo "${green}[!]${reset} Mubix's Post Exploit Git Repo is being installed..."
  {
    git clone https://github.com/mubix/post-exploitation.git
  } &> /dev/null
else
  echo "${green}[!]${reset} Mubix's Post Exploit Git Repo is being updated..."
  {
    cd /opt/post-exploitation && git pull && cd /opt
  } &> /dev/null
fi

if [ ! -d "/opt/Windows-Exploit-Suggester" ]; then
  echo "${green}[!]${reset} Windows-Exploit-Suggester Exploit Git Repo is being installed..."
  {
    git clone https://github.com/GDSSecurity/Windows-Exploit-Suggester.git
  } &> /dev/null
else
  echo "${green}[!]${reset} Windows-Exploit-Suggester Exploit Git Repo is being updated..."
  {
    cd /opt/Windows-Exploit-Suggester && git pull && cd /opt
  } &> /dev/null
fi

if [ ! -d "/opt/linux-exploit-suggester" ]; then
  echo "${green}[!]${reset} Linux Exploit Suggester is being installed..."
  {
    git clone https://github.com/mzet-/linux-exploit-suggester.git
  } &> /dev/null
else
  echo "${green}[!]${reset} Linux Exploit Suggester is being updated..."
  {
    cd /opt/linux-exploit-suggester && git pull && cd /opt
  } &> /dev/null
fi

if [ ! -d "/opt/exploitdb" ]; then
  echo "${green}[!]${reset} ExploitDB is being installed..."
  {
    git clone https://github.com/offensive-security/exploitdb.git
  } &> /dev/null
else
  echo "${green}[!]${reset} ExploitDB is being updated..."
  {
    cd /opt/exploitdb && git pull && cd /opt
  } &> /dev/null
fi

if [ ! -d "/opt/metasploit-framework" ]; then
  echo "${green}[!]${reset} Metasploit is being installed..."
  {
    git clone https://github.com/rapid7/metasploit-framework.git
  } &> /dev/null
else
  echo "${green}[!]${reset} Metasploit is being updated..."
  {
    cd /opt/metasploit-framework && git pull && cd /opt
  } &> /dev/null
fi

if [ ! -d "/opt/w3af" ]; then
  echo "${green}[!]${reset} w3af is being installed..."
  {
    git clone https://github.com/andresriancho/w3af.git
  } &> /dev/null
else
  echo "${green}[!]${reset} w3af is being updated..."
  {
    cd /opt/w3af && git pull && cd /opt
  } &> /dev/null
fi

if [ ! -d "/opt/joomscan" ]; then
  echo "${green}[!]${reset} joomscan is being installed..."
  {
    git clone https://github.com/rezasp/joomscan.git /opt
  } &> /dev/null
else
  echo "${green}[!]${reset} joomscan is being updated..."
  {
    cd /opt/joomscan && git pull && cd /opt
  } &> /dev/null
fi

if [ ! -d "/opt/wpscan" ]; then
  echo "${green}[!]${reset} wpscan is being installed..."
  {
    git clone https://github.com/wpscanteam/wpscan.git /opt
  } &> /dev/null
else
  echo "${green}[!]${reset} wpscan is being updated..."
  {
    cd /opt/wpscan && git pull && cd /opt
  } &> /dev/null
fi



