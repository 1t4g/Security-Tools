#!/bin/bash

# Set the global variables

# Colours
R='\033[0;31m'
G='\033[0;32m'
O='\033[0;33m'
B='\033[0;34m'
NC='\033[0m'

# Paths
home="/opt/pscan/results"

spin='-\|/'

# Check to see if our directories are good.
if [ ! -d "$home" ] ; then
        mkdir $home
fi

banner() {
        clear
        printf "${O}---------------------------------------------------------------------------------\n"
        printf "${O}| Welcome to Pete's basic recon script.                                         |\n"
        printf "${O}| Copyright (c) 2010-2017 Hedgehog Security.                                    |\n"
        printf "${O}|                                                                               |\n"
        printf "${O}| Contact: research@hedgehogsecurity.gi                                         |\n"
        printf "${O}| Version: 1.0.02                                                               |\n"
        printf "${O}---------------------------------------------------------------------------------\n"
        printf "\n \n"
        printf "${O}Peter says always keep your Kali instance up to date...\n"
        printf "\n \n"
}


setupScan() {
        printf "${B}[!]${NC} Looks like we are you to date. Lets get going...\n"
        printf "${B}[+]${NC} What is the name of the client?     "; read client
        printf "${B}[+]${NC} What is the Scan Title?             "; read scanTitle
        printf "${B}[+]${NC} What is the IP range for scanning?  " ;read iprange
        printf "${B}[+]${NC} Please choose from the following ports to scan:\n"
        printf "  ${O}[1] - 30 most common ports\n"
        printf "  ${O}[2] - All 65535 tcp ports\n"
        printf "  ${O}[3] - Standard Privileged ports (1-1024) "; read chosenPorts

        baseLinePorts="5,21,22,23,25,53,80,110,111,135,143,389,443,445,465,587,990,993,995,1433,1723,3306,3389,5000,8080,8081,8443,8888,9100,61439"
        allPorts="1-65535"
        privPorts="1-1024"

        if [ $chosenPorts = "1" ]; then
                scanPorts=$baseLinePorts
        elif [ $chosenPorts = "2" ] ; then
                scanPorts=$allPorts
        else
                scanPorts=$privPorts
        fi

        printf "\n"
        printf "${O}[!]${NC} OK, we are going to scan the following ports: $scanPorts...\n\n"
        printf "${O}[!]${NC} Press enter to proceed..\n"
        read -p " "

        mkdir $home/$client
        mkdir $home/$client/tmp
        mkdir $home/$client/$scanTitle
        echo $iprange > $home/$client/$scanTitle/scope
}

startScan() {
        cat $home/$client/$scanTitle/baselineScan.gnmap|grep "$port/open"|awk -F' ' '{print $2}' >> $home/$client/tmp/pscan_$port
        printf "${G}[+]${NC} Services found on port $port.\n"
        printf "${G}[+]${NC} Running a scan.\n"
}

endScanDiag() {
        printf "${G}[+]${O} Scan Completed on port $port.\n"
        rm -f $home/$client/tmp/pscan_$port
}

noPortDiag() {
        printf "${R}[-]${NC} No live services on port $port.\n"
}

nmapScriptScan() {
        nmap -p $port --script=$scripts -iL $home/$client/tmp/pscan_$port -oA $home/$client/$scanTitle/port-$port-tcp-Scan
}

nmapScriptScanUDP() {
        nmap -sU -p $port --script=$scripts -iL $home/$client/tmp/pscan_$port -oA $home/$client/$scanTitle/port-$port-udp-Scan
}

getPort() {
        cat $home/$client/$scanTitle/baselineScan.gnmap|grep "$port/open"|wc -l
}

runNikto() {
        for ip in `cat $client/tmp/pscan_$port`; do nikto -h $ip -Tuning 2 3 b -o $home/$client/$scanTitle/$ip.port-$port-nikto.xml -Format xml -p $port ; done
}

runWfuzzBig() {
        for ip in `cat $home/$client/tmp/pscan_$port`; do wfuzz -c -w /opt/SecLists/Discovery/Web_Content/big.txt --hc 404 $ip/FUZZ ; done
}

postNiktoMine() {
        htld=`cat $home/$client/$scanTitle/port-443-nikto.xml|grep CN|awk -F'=' '{print $8}'|awk -F'"' '{print $1}'`

}

harvest() {
        banner
        printf "${B}[!]${NC} Looks like we are you to date. Lets get going...\n"
        printf "${B}[+]${NC} What is the name of the client?     "; read client
        printf "${B}[+]${NC} What is the Scan Title?             "; read scanTitle
        printf "${B}[+]${NC} What is the domain you seek?        " ;read domain
                if [ ! -d "$home/$client" ] ; then
                        mkdir $home/$client
                fi
                if [ ! -d "$home/$client/$scanTitle" ] ; then
                        mkdir $home/$client/$scanTitle
                fi
        theharvester -d $domain -b all -f $home/$client/$scanTitle/$domain.harvest
                printf "\n\n"
        read -p "Press enter to continue..."
}

nmapScriptScan() {
        nmap -p $port --script=$scripts $host -oA $host.$port.detailed.nmap
}

baseLineScan() {
        # Initial Baseline Scan
        {
                nmap -p $scanPorts -vv -iL $home/$client/$scanTitle/scope -oA $home/$client/$scanTitle/baselineScan
        } &> /dev/null
}

portScan() {
        output=`cat $home/$client/$scanTitle/baselineScan.gnmap|grep open|awk -F':' '{print $3}'`
        host=`cat $home/$client/$scanTitle/baselineScan.gnmap|grep open|awk -F' ' '{print $2}'`
        arr=($output)

        echo "Scanning $host."
        for i in ${arr[@]};
          do
                port=`echo $i|grep 'open'|awk -F'/' '{print $1}';`
                if [ -n "$port" ]; then
                  echo "Scanning $port on $host."
                  nmap -p $port -sV --script=default,banner $host -oA $home/$client/$scanTitle/$host.$port.nmap
                  script=`cat $host.$port.nmap.gnmap|grep Ports|awk -F'/' '{print $5}'`
                  if [ -n "$script" ]; then
                        echo "Scanning $script"
                  fi
                  if [ $script == "http" ]; then 
			  checkHttp 
		  fi
		  if [ $script == "https" ]; then 
			  checkHttps 
		  fi
                fi
        done
}

checkHttp() {
		printf "${G}[+]${NC} Checking over a http service on $port\n"
                scripts="banner,default"
                nmapScriptScan
		nikto -host $host -port $port -T x6 -C all -mutate 123 -output $home/$client/$scanTitle/nikto_output_$host_$port.xml -Format xml
                wfuzz -c -w /opt/SecLists/Discovery/Web_Content/big --hc 404 $host:$port
}

checkHttps() {
                printf "${G}[+]${NC} Checking over a https service on $port\n"
                scripts="banner,default,ssl-ccs-injection,ssl-cert-intaddr,ssl-cert,ssl-date,ssl-dh-params,ssl-enum-ciphers,ssl-heartbleed,ssl-known-key,ssl-poodle,sslv2-drown,sslv2"
                nmapScriptScan
                sslscan --xml=$home/$client/$scanTitle/sslscan_output_$host_$port.xml $host:$port
                nikto -host $host -port $port -T x6 -C all -mutate 123 -output $home/$client/$scanTitle/nikto_output_$host_$port.xml -Format xml
                wfuzz -c -w /opt/SecLists/Discovery/Web_Content/big --hc 404 $host:$port
}

spinner() {
		printf "${G}[-]${NC} Updating...\n "
		i=0
		while kill -0 $pid 2>/dev/null
		do
			i=$(( (i+1) %4 ))
  			printf "\r${spin:$i:1}"
  			sleep .1
		done
}

install() {
        printf "${G}[+]${NC} Installing PScan\n"
        cwd=`echo $PWD`
        printf "${G}[+]${NC} Updating your Kali instance. This may take a few minutes.\n"
        {
                apt update && apt upgrade -y
                apt install -y gawk openvpn git unzip ruby build-essential libreadline-dev libssl-dev libreadline5 libsqlite3-dev git-core autoconf curl zlib1g-dev libxml2-dev libxslt1-dev libyaml-dev ruby-dev screen nfs-common rpcbind 
        } &> /dev/null & pid=$!
	spinner
        if [ ! -d "/opt/SecLists" ] ; then
                printf "${R}[!]${NC} SecList repo not present. Installing now.\n"
                {
                        cd /opt && git clone https://github.com/danielmiessler/SecLists.git
                } &> /dev/null
       else
                printf "${G}[-]${NC} Checking Seclist Repo... " && cd /opt/SecLists && git pull
        fi
        if [ ! -d "/opt/metasploit-framework" ] ; then
                printf "${R}[!]${NC} Metasploit repo not present. Installing now.\n"
                {
                        cd /opt && git clone https://github.com/rapid7/metasploit-framework.git
                        cd /opt/metasploit-framework
                } &> /dev/null
        else
                printf "${G}[-]${NC} Checking Metasploit Repo... " && cd /opt/metasploit-framework && git pull
        fi
        if [ ! -d "/opt/linuxprivchecker" ] ; then
                printf "${R}[!]${NC} Linux Privilege Checker repo not present. Installing now.\n"
                {
                        cd /opt &&  git clone https://github.com/sleventyeleven/linuxprivchecker.git
                } &> /dev/null
        else
                printf "${G}[-]${NC} Checking Linux Privilege Escalation Repo... " && cd /opt/linuxprivchecker && git pull
        fi
        if [ ! -d "/opt/Privilege-Escalation" ] ; then
                printf "${R}[!]${NC} Privilege Escalation repo not present. Installing now.\n"
                {
                        cd /opt && git clone https://github.com/AusJock/Privilege-Escalation.git
                } &> /dev/null
        else
                printf "${G}[-]${NC} Checking General Privilege Escalation Repo... " && cd /opt/Privilege-Escalation && git pull
        fi
        if [ ! -d "/opt/linux-exploit-suggester" ]; then
                printf "${R}[!]${NC} Exploit Suggester repo not present. Installing now.\n"
                {
                        cd /opt && git clone https://github.com/mzet-/linux-exploit-suggester.git
                } &> /dev/null
        else
                printf "${G}[-]${NC} Checking Linux Exploit Suggester Repo... " && cd /opt/linux-exploit-suggester && git pull
        fi
        if [ ! -d "/opt/routersploit" ]; then
                printf "${R}[!]${NC} Routersploit repo is not present. Installing now.\n"
                {
                        cd /opt && git clone https://github.com/reverse-shell/routersploit.git
                } &> /dev/null
        else
                printf "${G}[-]${NC} Checking Routersploit Repo... " && cd /opt/routersploit && git pull
        fi
        if [ ! -d "/opt/PRET" ]; then
                printf "${R}[!]${NC} Printer Exploitation Toolkit repo is not present. Installing now.\n"
                {
                        cd /opt && git clone https://github.com/RUB-NDS/PRET.git
                } &> /dev/null
        else
                printf "${G}[-]${NC} Checking Printer Exploitation Toolkit Repo... " && cd /opt/PRET && git pull
        fi
        if [ ! -d "/opt/xray" ]; then
                printf "${R}[!]${NC} XRay repo is not present. Installing now.\n"
                {
                        cd /opt && git clone https://github.com/evilsocket/xray.git
                } &> /dev/null
        else
                printf "${G}[-]${NC} Checking XRay Repo... " && cd /opt/xray && git pull
        fi
        if [ ! -d "/opt/sslyze" ]; then
                printf "${R}[!]${NC} SSLyze repo is not present. Installing now.\n"
                {
                        cd /opt && git clone https://github.com/nabla-c0d3/sslyze.git
                } &> /dev/null
        else
                printf "${G}[-]${NC} Checking SSLyze Repo... " && cd /opt/sslyze && git pull
        fi

printf "\n \n"
printf "${O}------------------------------------------------------------------------\n"
printf "${O}|${NC}                                                   _                  ${O}|\n"
printf "${O}|${NC}  This build is certified as good to go           ( |                ${O} |\n"
printf "${O}|${NC}                                                  (  \               ${O} |\n"
printf "${O}|${NC}  by Hedgehog Security                           __\  \____          ${O} |\n"
printf "${O}|${NC}                                                (____)    |          ${O} |\n"
printf "${O}|${NC}                                                (____)|   |          ${O} |\n"
printf "${O}|${NC}                                                 (____).__|          ${O} |\n"
printf "${O}|${NC}                                                  (___)__.|          ${O} |\n"
printf "${O}------------------------------------------------------------------------${NC}\n"
        cd $PWD
        printf "\n\n"
        read -p "Press enter to continue..."
}

showHelp() {
        printf "${O}Welcome to the help function...${NC}\n\n"
        printf "Important URLs\n"
        printf "The wiki is at:                         ${G}https://www.hedgehogsecurity.co.uk/b/wiki${NC}\n"
        printf "The Cyber Essentials portal:            ${G}https://cyberessentials.hedgehogsecurity.co.uk${NC}\n\n"
        printf "Pentest Playbook:                       ${G}https://www.hedgehogsecurity.co.uk/b/wiki/index.php/Penetration-testing-playbook${NC}\n"
        printf "Vulnerability Scan Playbook:            ${G}https://www.hedgehogsecurity.co.uk/b/wiki/index.php/Vulnerability-scanning-playbook${NC}\n"
        printf "SOC Monitoring Playbook:                ${G}https://www.hedgehogsecurity.co.uk/b/wiki/index.php/Soc-monitoring-playbook${NC}\n"
        printf "Incident Response Playbook:             ${G}https://www.hedgehogsecurity.co.uk/b/wiki/index.php/Incident-response-playbook${NC}\n"
        printf "Various Guides:                         ${G}https://www.hedgehogsecurity.co.uk/b/wiki/index.php/Guides${NC}\n"
        printf "\n"
        printf "This script will update your Kali distribution to the standard Hedgehog pentest build.\n"
        printf "To make sure you are up to date:        ${G}pscan install${NC}\n"
        printf "\n\n"
        read -p "Press enter to return to menu..."

}

webappPlaybook() {
        printf "${O}WEB APPLICATION TESTING PLAYBOOK${NC}\n\n"
        printf "INFORMATION GATHERING\n"
        printf "${G}IG-001${NC} - Spiders, Robots and Crawlers.\n"
        printf "${G}IG-002${NC} - Search Engine Discovery and application reconnaissance.\n"
        printf "${G}IG-003${NC} - Identify application entry points.\n"
        printf "${G}IG-004${NC} - Test for web application fingerprints.\n"
        printf "${G}IG-005${NC} - Application discovery.\n"
        printf "${G}IG-006${NC} - Analysis of error codes.\n"
        printf "\n"
        printf "CONFIGURATION MANAGEMENT\n"
        printf "${G}CM-001${NC} - SSL/TLS Testing (SSL Version, Algorithms, Key length, Digital Cert. Validity) - SSL Weakness\n"
        printf "${G}CM-002${NC} - DB Listener Testing - DB Listener weak\n"
        printf "${G}CM-003${NC} - Infrastructure Configuration Management Testing - Infrastructure Configuration management weakness\n"
        printf "${G}CM-004${NC} - Application Configuration Management Testing - Application Configuration management weakness\n";

        printf "\n"
        read -p "Press enter to return to menu..."
}



showMenus() {
        banner
        printf "\n\n"
        printf "${O}[1]${NC}       Update & Certify System\n"
        printf "${O}[2]${NC}       OS Intelligence Gathering\n"
        printf "${O}[3]${NC}       Recon Scan\n"
        printf "${O}[4]${NC}       Vulnerability Scan\n"
        printf "\n"
        printf "${O}[web]${NC}     Web Application Playbook\n"
        printf "\n"
        printf "${O}[h]${NC}       Show Help\n"
        printf "${O}[q]${NC}       Exit\n"
        printf "\n\n"
}

readOptions() {
        local choice
        printf "${NC}Please enter you choice:   "
        read choice
        case $choice in
                1)
                        banner
                        install
                        ;;
                2)
                        banneros
                        harvest
                        ;;
                3)
                        banner
                        setupScan
                        baseLineScan
                        portScan
                        ;;
                web)
                        banner
                        webappPlaybook
                        ;;
                h)
                        banner
                        showHelp
                        ;;
                q)
                        exit 0
                        ;;
                *)
                        printf "${R}Error... ${STD}" && sleep 2
        esac
}

trap '' SIGINT SIGQUOT SIGTSTP

while true
do
        showMenus
        readOptions
done
